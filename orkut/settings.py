"""
Django settings for orkut project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e&xj$v%tc-y_@4q526no1(@hg9q(lr^^b9iyn=#8og6ri&t1(q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

REST_FRAMEWORK = {
     
    'DEFAULT_AUTHENTICATION_CLASSES': (
         
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
     
}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'market.apps.MarketConfig',
    'users.apps.UsersConfig',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'orkut.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'orkut.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# MEDIA_URL = '/images/'




STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'static'),
]

MEDIA_ROOT = os.path.join(BASE_DIR,'static/images')
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'

EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_SSL = True
EMAIL_PORT = 465
# EMAIL_USE_TLS = True

# EMAIL_PORT = 587
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_USE_TLS = False
# EMAIL_HOST = 'smtppro.zoho.in'
# EMAIL_PORT = 587


LOG_DIR="log/"

if not os.path.exists('log'):
   os.makedirs('log')

# LOGGING = {
#     'version': 1,
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         }
#     },
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             "formatter": "verbose",
#             'class': 'logging.StreamHandler',
#         },
#         'file': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'filename': 'log/debug.log'
#         },
#         "all_log": {
#             "level": "DEBUG",
#             "class": "logging.handlers.TimedRotatingFileHandler",
#             "filename": os.path.join(LOG_DIR, 'all.log'),
#             "formatter": "verbose",
#             "when": "MIDNIGHT",
#             "backupCount": 13
#         },
#         "error_log": {
#             "level": "ERROR",
#             "class": "logging.handlers.TimedRotatingFileHandler",
#             "filename": os.path.join(LOG_DIR, "error.log"),
#             "formatter": "verbose",
#             "when": "MIDNIGHT",
#             "backupCount": 13
#         }
#     },
#     'loggers': {
#         '':{
#             'level':'INFO',
#             "handlers": [ "all_log", "error_log"],
#             "propogate":False,
#         }
#     }
# }


LOGGING = {
    'version': 1,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'formatters': {
        'verbose': {
            'format': '{asctime}  {message}',
            'style': '{',
        },
    },
    'handlers': {
        "cd_ew": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, 'cd_ew.log'),
            "formatter": "verbose",
            
        },
        "cd_croma": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, 'cd_croma.log'),
            "formatter": "verbose",
            
        },
        "cd_dg": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, 'cd_dg.log'),
            "formatter": "verbose",
            
        },
        "cd_ola": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, 'cd_ola.log'),
            "formatter": "verbose",
            
        },
        "xiaomi_tv": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, 'xiaomi_tv.log'),
            "formatter": "verbose",
            
        },
        "xiaomi_others": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, 'xiaomi_others.log'),
            "formatter": "verbose",
            
        },
        "mobile_croma": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, 'mobile_croma.log'),
            "formatter": "verbose",
            
        },
        "mobile_mi": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, 'mobile_mi.log'),
            "formatter": "verbose",
            
        },
        "mobile_ew": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, 'mobile_ew.log'),
            "formatter": "verbose",
            
        },
        "mobile_dg": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, 'mobile_dg.log'),
            "formatter": "verbose",
            
        },
        "lifestyle": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, "lifestyle.log"),
            "formatter": "verbose",
            
        },
        "all": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, "all.log"),
            "formatter": "verbose",
            
        },
        "rem": {
            "level": "ERROR",
            'class': 'logging.FileHandler',
            "filename": os.path.join(LOG_DIR, "rem.log"),
            "formatter": "verbose",
            
        }
    },
    'loggers': {
        'all':{
            'level':'DEBUG',
            "handlers": [ "all"],
            "propogate":False,
        },
        'cd_ew':{
            'level':'DEBUG',
            "handlers": [ "cd_ew"],
            "propogate":False,
        },
        'cd_croma':{
            'level':'DEBUG',
            "handlers": [ "cd_croma"],
            "propogate":False,
        },
        'cd_dg':{
            'level':'DEBUG',
            "handlers": [ "cd_dg"],
            "propogate":False,
        },
        'cd_ola':{
            'level':'DEBUG',
            "handlers": [ "cd_ola"],
            "propogate":False,
        },
        'xiaomi_tv':{
            'level':'DEBUG',
            "handlers": [ "xiaomi_tv"],
            "propogate":False,
        },
        'xiaomi_others':{
            'level':'DEBUG',
            "handlers": [ "xiaomi_others"],
            "propogate":False,
        },
        'mobile_croma':{
            'level':'DEBUG',
            "handlers": [ "mobile_croma"],
            "propogate":False,
        },
        'mobile_mi':{
            'level':'DEBUG',
            "handlers": [ "mobile_mi"],
            "propogate":False,
        },
        'mobile_ew':{
            'level':'DEBUG',
            "handlers": [ "mobile_ew"],
            "propogate":False,
        },
        'mobile_dg':{
            'level':'DEBUG',
            "handlers": [ "mobile_dg"],
            "propogate":False,
        },
        'lifestyle':{
            'level':'DEBUG',
            "handlers": [ "lifestyle"],
            "propogate":False,
        },
        'rem':{
            'level':'DEBUG',
            "handlers": [ "rem"],
            "propogate":False,
        }
    }
}

# import logging.config
# logging.config.dictConfig(LOGGING)

WARRANTY_BASE_URL = "https://zopperwarranty-pub.zopper.com:86"
ACCOUNTS_BASE_URL = "http://accounts.stg.zopperext",



